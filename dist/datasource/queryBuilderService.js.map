{"version":3,"sources":["../../src/datasource/queryBuilderService.js"],"names":["QueryBuilderService","variableOrderLength","variables","variableOrder","values","i","id","push","hasOwnProperty","value","startsWith","queryString","matching","replacement","split","join","finalQuery","controller","orderedVariablesList","target","length","buildWithProvidedOrdering","buildWithDefaultOrdering","sort","reverse","the_service","substitutedFinalQuery","forEach","type","variableIsValid","undefined","substituteVariable","buildQueryVariable","subbedQuery","constructedQuery","queryVariable","arg","console","log","ReferenceError","tagBoxes","onFirstTag","tagMapping","queryArgs","addQueryArg"],"mappings":"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","sourcesContent":["export class QueryBuilderService {\n\n  buildWithProvidedOrdering(variableOrderLength, variables, variableOrder, values) {\n    for (var i = 0; i < variableOrderLength; i++) {\n      variables[variableOrder[i].id][\"id\"] = variableOrder[i].id;\n      values.push(variables[variableOrder[i].id]);\n    }\n  }\n\n  buildWithDefaultOrdering(variables, values){\n    for (var id in variables) {\n      if (variables.hasOwnProperty(id)) {\n        variables[id][\"id\"] = id;\n        values.push(variables[id]);\n      }\n    }\n  }\n\n  variableIsValid(value){\n    return value[\"inputName\"] && value[\"inputName\"].startsWith(\"$\")\n  }\n\n  substituteVariable(queryString, matching, replacement){\n    return queryString.split(matching).join(replacement);\n  }\n\n  substituteFinalQuery(finalQuery, controller) {\n    //Dictionary doesn't guarantee ordering, so convert to array and sort by key\n    var orderedVariablesList = [];\n    const variables = controller.target.variables;\n    const variableOrder = controller.target.variableOrder;\n    const variableOrderLength = variableOrder.length;\n    if (variableOrderLength) {\n      this.buildWithProvidedOrdering(variableOrderLength, variables, variableOrder, orderedVariablesList);\n    } else {\n      this.buildWithDefaultOrdering(variables, orderedVariablesList);\n    }\n    orderedVariablesList.sort();\n    //Work upwards\n    orderedVariablesList = orderedVariablesList.reverse();\n\n    var the_service = this;\n\n    var substitutedFinalQuery = finalQuery;\n    orderedVariablesList.forEach(function (value) {\n      if (value.type === \"variable\") {\n        if (the_service.variableIsValid(value)) {\n          if (value[\"inputValue\"] === undefined) {\n            substitutedFinalQuery = the_service.substituteVariable(substitutedFinalQuery, value[\"inputName\"], \"\");\n          } else {\n            substitutedFinalQuery = the_service.substituteVariable(substitutedFinalQuery, value[\"inputName\"], value[\"inputValue\"]);\n          }\n        }\n      }\n      if (value.type === \"queryVariable\") {\n        substitutedFinalQuery = the_service.substituteVariable(substitutedFinalQuery, value[\"inputValue\"], the_service.buildQueryVariable(value, value.id, controller));\n      }\n    });\n    controller.target.subbedQuery = substitutedFinalQuery;\n    return substitutedFinalQuery;\n  }\n\n  addQueryArg(constructedQuery, queryVariable, arg){\n    if(queryVariable[arg]){\n      if(arg == \"num\"){\n        constructedQuery += ', ' + queryVariable[arg]\n      }else{\n        constructedQuery += ', \"' + queryVariable[arg] + '\"'\n      }\n    }\n    return constructedQuery\n  }\n\n  buildQueryVariable(queryVariable, id, controller) {\n    console.log(queryVariable)\n\n    var constructedQuery = \"\";\n    if(!queryVariable){throw new ReferenceError(\"No query parameters found\")}\n    if(!queryVariable[\"queryFunction\"]){throw new ReferenceError(\"Query function not set\")}\n    if(!queryVariable[\"queryAgg\"]){throw new ReferenceError(\"Query aggregator not set\")}\n    if(!queryVariable[\"metric\"]){throw new ReferenceError(\"Query metric not set\")}\n\n    constructedQuery += queryVariable[\"queryFunction\"] + '(\"';\n    constructedQuery += queryVariable[\"queryAgg\"] + \":\";\n    if(queryVariable[\"downsampleTime\"]){\n      constructedQuery += queryVariable[\"downsampleTime\"];\n      if(queryVariable[\"downsampleAgg\"]){\n        constructedQuery += \"-\" + queryVariable[\"downsampleAgg\"]\n      }\n      if(queryVariable[\"fillPolicy\"]){\n        constructedQuery += \"-\" + queryVariable[\"fillPolicy\"]\n      }\n    }\n    if(queryVariable[\"conversionFlag\"]){\n      constructedQuery += \":\" + queryVariable[\"conversionFlag\"]\n    }\n    if(queryVariable[\"flags\"]){\n      constructedQuery += \":\" + queryVariable[\"flags\"]\n    }\n    constructedQuery += \":\" + queryVariable[\"metric\"] + \"{\";\n    if(queryVariable[\"metricTags\"]){\n      constructedQuery += queryVariable[\"metricTags\"]\n    }\n    constructedQuery += \"}\";\n    if(controller.target.tagBoxes[id]){\n      var onFirstTag = true;\n\n      constructedQuery += \"{\";\n      for (var tagMapping in controller.target.tagBoxes[id]) {\n        if (controller.target.tagBoxes[id].hasOwnProperty(tagMapping)) {\n          if(!onFirstTag){\n            constructedQuery += \", \"\n          }else{onFirstTag = false;}\n          constructedQuery += controller.target.tagBoxes[id][tagMapping][\"key\"] + \"=\" + controller.target.tagBoxes[id][tagMapping][\"value\"]\n        }\n      }\n      constructedQuery += '}\"'\n    }else{\n      constructedQuery += '{}\"'\n    }\n    var the_service = this;\n    var queryArgs = [\"startDuration\", \"endDuration\", \"duration\", \"period\", \"funcName\", \"num\"]\n    queryArgs.forEach(function (arg) {\n      constructedQuery = the_service.addQueryArg(constructedQuery, queryVariable, arg);\n    });\n    constructedQuery += \")\";\n    console.log(constructedQuery);\n    return constructedQuery;\n  }\n}\n"],"file":"queryBuilderService.js"}