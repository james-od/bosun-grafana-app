{"version":3,"sources":["../../src/datasource/queryBuilderService.js"],"names":["variableIsValid","value","startsWith","substituteVariable","queryString","matching","replacement","split","join","substituteFinalQuery","finalQuery","controller","orderedVariablesList","target","variables","slice","sort","a","b","indexInUI","substitutedFinalQuery","index","forEach","type","undefined","buildQueryVariable","subbedQuery","addQueryArg","queryVariable","arg","ensureMinimalQuery","ReferenceError","addParamToQuery","prepend","param","append","addTagsToQuery","constructedQuery","tagType","onFirstTag","tagMapping","hasOwnProperty","grouptagBoxes","filtertagBoxes","queryVar"],"mappings":"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","sourcesContent":["function variableIsValid(value) {\n  return value[\"inputName\"] && value[\"inputName\"].startsWith(\"$\")\n}\n\nfunction substituteVariable(queryString, matching, replacement) {\n  return queryString.split(matching).join(replacement);\n}\n\nexport function substituteFinalQuery(finalQuery, controller) {\n  //Ensure ordered and work upwards\n  //Copy to not affect ordering\n  var orderedVariablesList = controller.target.variables.slice();\n\n  orderedVariablesList.sort((a, b) => (a.indexInUI < b.indexInUI) ? 1 : -1);\n\n  var substitutedFinalQuery = finalQuery;\n  var index = 0;\n  orderedVariablesList.forEach(function (value) {\n    if (value.type === \"variable\") {\n      if (variableIsValid(value)) {\n        if (value[\"inputValue\"] === undefined) {\n          substitutedFinalQuery = substituteVariable(\n            substitutedFinalQuery,\n            value[\"inputName\"],\n            \"\"\n          );\n        } else {\n          substitutedFinalQuery = substituteVariable(\n            substitutedFinalQuery,\n            value[\"inputName\"],\n            value[\"inputValue\"]\n          );\n        }\n      }\n    }\n    if (value.type === \"queryVariable\") {\n      substitutedFinalQuery = substituteVariable(\n        substitutedFinalQuery, value[\"inputValue\"],\n        buildQueryVariable(orderedVariablesList, value, index, controller)\n      );\n    }\n    index += 1;\n  });\n  controller.target.subbedQuery = substitutedFinalQuery;\n  return substitutedFinalQuery;\n}\n\nfunction addQueryArg(queryVariable, arg) {\n  if (queryVariable[arg]) {\n    if (arg === \"num\") {\n      return ', ' + queryVariable[arg]\n    } else {\n      return ', \"' + queryVariable[arg] + '\"'\n    }\n  } else {\n    return ', \"\"'\n  }\n}\n\nfunction ensureMinimalQuery(queryVariable) {\n  if (!queryVariable) {\n    throw new ReferenceError(\"No query parameters found\")\n  }\n  if (!queryVariable[\"queryFunction\"]) {\n    throw new ReferenceError(\"Query function not set\")\n  }\n  if (!queryVariable[\"queryAgg\"]) {\n    throw new ReferenceError(\"Query aggregator not set\")\n  }\n  if (!queryVariable[\"metric\"]) {\n    throw new ReferenceError(\"Query metric not set\")\n  }\n}\n\nfunction addParamToQuery(queryVariable, prepend, param, append) {\n  if (queryVariable[param]) {\n    return prepend + queryVariable[param] + append;\n  }\n  return \"\";\n}\n\nfunction addTagsToQuery(constructedQuery, orderedVariablesList, index, tagType) {\n  var onFirstTag = true;\n  for (var tagMapping in orderedVariablesList[index][tagType + \"tagBoxes\"]) {\n    if (orderedVariablesList[index][tagType + \"tagBoxes\"].hasOwnProperty(tagMapping)) {\n      if (!onFirstTag) {\n        constructedQuery += \",\"\n      } else {\n        onFirstTag = false;\n      }\n      constructedQuery +=\n        orderedVariablesList[index][tagType + \"tagBoxes\"][tagMapping][\"key\"]\n        + \"=\"\n        + orderedVariablesList[index][tagType + \"tagBoxes\"][tagMapping][\"value\"]\n    }\n  }\n  return constructedQuery;\n}\n\nfunction buildQueryVariable(orderedVariablesList, queryVariable, index) {\n\n  ensureMinimalQuery(queryVariable);\n\n  var constructedQuery = queryVariable[\"queryFunction\"] + '(\"' + queryVariable[\"queryAgg\"] + \":\";\n  if (queryVariable[\"downsampleTime\"]) {\n    constructedQuery += queryVariable[\"downsampleTime\"];\n    constructedQuery += addParamToQuery(queryVariable, \"-\", \"downsampleAgg\", \"\");\n  } else {\n    constructedQuery += addParamToQuery(queryVariable, \"\", \"downsampleAgg\", \"\");\n  }\n  constructedQuery += addParamToQuery(queryVariable, \"-\", \"fillPolicy\", \"\");\n  constructedQuery += addParamToQuery(queryVariable, \":\", \"conversionFlag\", \"\");\n  constructedQuery += addParamToQuery(queryVariable, \":\", \"flags\", \"\");\n\n  if (queryVariable[\"downsampleTime\"] || queryVariable[\"downsampleAgg\"] || queryVariable[\"fillPolicy\"]) {\n    constructedQuery += \":\"\n  }\n  constructedQuery += queryVariable[\"metric\"] + \"{\";\n\n  if (orderedVariablesList[index] && orderedVariablesList[index].grouptagBoxes) {\n    constructedQuery = addTagsToQuery(constructedQuery, orderedVariablesList, index, 'group')\n  }\n  constructedQuery += \"}{\";\n  if (orderedVariablesList[index] && orderedVariablesList[index].filtertagBoxes) {\n    constructedQuery = addTagsToQuery(constructedQuery, orderedVariablesList, index, 'filter');\n  }\n  constructedQuery += '}\"';\n\n  const queryVar = queryVariable[\"queryFunction\"];\n  if (queryVar === \"q\" || queryVar === \"change\" || queryVar === \"count\") {\n    constructedQuery += addQueryArg(queryVariable, \"startDuration\");\n    constructedQuery += addQueryArg(queryVariable, \"endDuration\");\n  }\n  if (queryVar === \"band\" || queryVar === \"over\" || queryVar === \"shiftBand\") {\n    constructedQuery += addQueryArg(queryVariable, \"duration\");\n    constructedQuery += addQueryArg(queryVariable, \"period\");\n    constructedQuery += addQueryArg(queryVariable, \"num\");\n  }\n  if (queryVar === \"window\") {\n    constructedQuery += addQueryArg(queryVariable, \"duration\");\n    constructedQuery += addQueryArg(queryVariable, \"period\");\n    constructedQuery += addQueryArg(queryVariable, \"num\");\n    constructedQuery += addQueryArg(queryVariable, \"funcName\");\n  }\n  constructedQuery += \")\";\n  return constructedQuery;\n}\n\n"],"file":"queryBuilderService.js"}