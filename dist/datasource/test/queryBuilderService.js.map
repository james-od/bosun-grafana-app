{"version":3,"sources":["../../../src/datasource/test/queryBuilderService.test.js"],"names":["QueryBuilderService","test","qbs","myMock","jest","fn","mocked_this","scope","variables","type","inputName","inputValue","variableOrder","expect","substituteFinalQuery","toBe","value","queryVariableName","queryFunction","metric","queryAgg","downsampleTime","downsampleAgg","endDuration","startDuration","tagBoxes","key"],"mappings":"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","sourcesContent":["import {QueryBuilderService} from \"./../queryBuilderService\";\n\ntest('simple substitution in final query', () => {\n  var qbs = new QueryBuilderService();\n  const myMock = jest.fn()\n  const mocked_this = new myMock();\n  mocked_this.scope = {\n    variables: {\n      0: {type: \"variable\", inputName: \"$a\", inputValue: \"1\"}\n    },\n    variableOrder: []\n  };\n  expect(qbs.substituteFinalQuery(\"$a\", mocked_this)).toBe(\"1\");\n});\n\ntest('multiple simple substitutions in final query', () => {\n  var qbs = new QueryBuilderService();\n  const myMock = jest.fn()\n  const mocked_this = new myMock();\n  mocked_this.scope = {\n    variables: {\n      0: {type: \"variable\", inputName: \"$a\", inputValue: \"1\"},\n      1: {type: \"variable\", inputName: \"$b\", inputValue: \"2\"},\n      2: {type: \"variable\", inputName: \"$c\", inputValue: \"3\"}\n    },\n    variableOrder: []\n  };\n  expect(qbs.substituteFinalQuery(\"$a$b$c\", mocked_this)).toBe(\"123\");\n});\n\ntest('multiple nested substitutions', () => {\n  var qbs = new QueryBuilderService();\n  const myMock = jest.fn()\n  const mocked_this = new myMock();\n  mocked_this.scope = {\n    variables: {\n      0: {type: \"variable\", inputName: \"$a\", inputValue: \"1\"},\n      1: {type: \"variable\", inputName: \"$b\", inputValue: \"$a\"},\n      2: {type: \"variable\", inputName: \"$c\", inputValue: \"$a$b\"}\n    },\n    variableOrder: []\n  };\n  expect(qbs.substituteFinalQuery(\"$c\", mocked_this)).toBe(\"11\");\n});\n\ntest('reordered simple substitutions', () => {\n  var qbs = new QueryBuilderService();\n  const myMock = jest.fn()\n  const mocked_this = new myMock();\n  mocked_this.scope = {\n    variables: {\n      0: {type: \"variable\", inputName: \"$time\", inputValue: \"1h\"},\n      1: {type: \"variable\", inputName: \"$tagValue\", inputValue: \"hello\"},\n      2: {\n        type: \"queryVariable\",\n        value: {\n          queryVariableName: \"$q\", queryFunction: \"q\", metric: \"example.metric\", queryAgg: \"avg\",\n          downsampleTime: \"$time\", downsampleAgg: \"avg\", endDuration: \"2h\", startDuration:\"$time\"\n        }\n      }\n    },\n    variableOrder: [],\n    tagBoxes: {\n      2: {0: {key: \"tagName\", value: \"$tagValue\"}}\n    }\n  };\n  expect(qbs.substituteFinalQuery(\"$q\", mocked_this)).toBe(\n    \"q(\\\"avg:1h-avg:example.metric{}{tagName=hello}\\\", \\\"1h\\\", \\\"2h\\\")\"\n  );\n});\n\n"],"file":"queryBuilderService.js"}