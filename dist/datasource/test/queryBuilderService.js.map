{"version":3,"sources":["../../../src/datasource/test/queryBuilderService.test.js"],"names":["QueryBuilderService","test","qbs","myMock","jest","fn","mocked_this","target","variables","type","inputName","inputValue","variableOrder","expect","substituteFinalQuery","toBe","queryFunction","metric","queryAgg","downsampleTime","downsampleAgg","endDuration","startDuration","filtertagBoxes","key","value","flags","undefined","e","message","duration","num","period"],"mappings":"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","sourcesContent":["import {QueryBuilderService} from \"./../queryBuilderService\";\n\ntest('simple substitution in final query', () => {\n  var qbs = new QueryBuilderService();\n  const myMock = jest.fn()\n  const mocked_this = new myMock();\n  mocked_this.target = {\n    variables: {\n      0: {type: \"variable\", inputName: \"$a\", inputValue: \"1\"}\n    },\n    variableOrder: []\n  };\n  expect(qbs.substituteFinalQuery(\"$a\", mocked_this)).toBe(\"1\");\n});\n\ntest('multiple simple substitutions in final query', () => {\n  var qbs = new QueryBuilderService();\n  const myMock = jest.fn()\n  const mocked_this = new myMock();\n  mocked_this.target = {\n    variables: {\n      0: {type: \"variable\", inputName: \"$a\", inputValue: \"1\"},\n      1: {type: \"variable\", inputName: \"$b\", inputValue: \"2\"},\n      2: {type: \"variable\", inputName: \"$c\", inputValue: \"3\"}\n    },\n    variableOrder: []\n  };\n  expect(qbs.substituteFinalQuery(\"$a$b$c\", mocked_this)).toBe(\"123\");\n});\n\ntest('multiple nested substitutions', () => {\n  var qbs = new QueryBuilderService();\n  const myMock = jest.fn()\n  const mocked_this = new myMock();\n  mocked_this.target = {\n    variables: {\n      0: {type: \"variable\", inputName: \"$a\", inputValue: \"1\"},\n      1: {type: \"variable\", inputName: \"$b\", inputValue: \"$a\"},\n      2: {type: \"variable\", inputName: \"$c\", inputValue: \"$a$b\"}\n    },\n    variableOrder: []\n  };\n  expect(qbs.substituteFinalQuery(\"$c\", mocked_this)).toBe(\"11\");\n});\n\ntest('Complex substitutions', () => {\n  var qbs = new QueryBuilderService();\n  const myMock = jest.fn()\n  const mocked_this = new myMock();\n  mocked_this.target = {\n    variables: {\n      0: {type: \"variable\", inputName: \"$time\", inputValue: \"1h\"},\n      1: {type: \"variable\", inputName: \"$tagValue\", inputValue: \"hello\"},\n      2: {\n        type: \"queryVariable\", inputValue: \"$q\", queryFunction: \"q\", metric: \"example.metric\", queryAgg: \"avg\",\n        downsampleTime: \"$time\", downsampleAgg: \"avg\", endDuration: \"2h\", startDuration:\"$time\"\n      }\n    },\n    variableOrder: [],\n    filtertagBoxes: {\n      2: {0: {key: \"tagName\", value: \"$tagValue\"}}\n    }\n  };\n  expect(qbs.substituteFinalQuery(\"$q\", mocked_this)).toBe(\n    \"q(\\\"avg:1h-avg:example.metric{}{tagName=hello}\\\", \\\"1h\\\", \\\"2h\\\")\"\n  );\n});\n\ntest('Flags', () => {\n  var qbs = new QueryBuilderService();\n  const myMock = jest.fn()\n  const mocked_this = new myMock();\n  mocked_this.target = {\n    variables: {\n      0: {\n        type: \"queryVariable\", inputValue: \"$q\", queryFunction: \"q\", flags: \"rate{counter,,1}\", metric: \"example.metric\", queryAgg: \"avg\",\n        downsampleTime: \"$time\", downsampleAgg: \"avg\", endDuration: \"2h\", startDuration:\"$time\"\n      }\n    },\n    variableOrder: [],\n    filtertagBoxes: {}\n  };\n  expect(qbs.substituteFinalQuery(\"$q\", mocked_this)).toBe(\n    \"q(\\\"avg:$time-avg:rate{counter,,1}:example.metric{}{}\\\", \\\"$time\\\", \\\"2h\\\")\"\n  );\n});\ntest('reordered complex substitution', () => {\n  var qbs = new QueryBuilderService();\n  const myMock = jest.fn()\n  const mocked_this = new myMock();\n  mocked_this.target = {\n    variables: {\n      0: {type: \"variable\", inputName: \"$time\", inputValue: \"1h\"},\n      1: {type: \"variable\", inputName: \"$tagValue\", inputValue: \"hello\"},\n      2: {\n        type: \"queryVariable\", inputValue: \"$q\", queryFunction: \"q\", metric: \"example.metric\", queryAgg: \"avg\",\n        downsampleTime: \"$time\", downsampleAgg: \"avg\", endDuration: \"2h\", startDuration:\"$time\"\n      }\n    },\n    //Simpler than trying to mock HTMLCollection\n    variableOrder: [{\"id\": 0}, {\"id\": 2}, {\"id\": 1}],\n    filtertagBoxes: {\n      2: {0: {key: \"tagName\", value: \"$tagValue\"}}\n    }\n  };\n  expect(qbs.substituteFinalQuery(\"$q\", mocked_this)).toBe(\n    \"q(\\\"avg:1h-avg:example.metric{}{tagName=$tagValue}\\\", \\\"1h\\\", \\\"2h\\\")\"\n  );\n});\n\ntest('error case - query function not set', () => {\n  var qbs = new QueryBuilderService();\n  const myMock = jest.fn()\n  const mocked_this = new myMock();\n  mocked_this.target = {\n    variables: {\n      0: {\n        type: \"queryVariable\", inputValue: \"$q\", queryFunction: undefined, metric: \"example.metric\", queryAgg: \"avg\",\n        downsampleTime: \"$time\", downsampleAgg: \"avg\", endDuration: \"2h\", startDuration:\"$time\"\n      }\n    },\n    //Simpler than trying to mock HTMLCollection\n    variableOrder: []\n  };\n  try{\n    qbs.substituteFinalQuery(\"$q\", mocked_this);\n  }catch (e) {\n    expect(e.message).toBe(\"Query function not set\");\n  }\n});\n\ntest('query types with `num` arg are built correctly', () => {\n  var qbs = new QueryBuilderService();\n  const myMock = jest.fn()\n  const mocked_this = new myMock();\n  mocked_this.target = {\n    variables: {\n      0: {type: \"variable\", inputName: \"$time\", inputValue: \"1h\"},\n      1: {type: \"variable\", inputName: \"$tagValue\", inputValue: \"hello\"},\n      2: {\n        type: \"queryVariable\", inputValue: \"$q\", queryFunction: \"over\", metric: \"example.metric\", queryAgg: \"avg\",\n        downsampleTime: \"$time\", downsampleAgg: \"avg\", duration: \"7d\", num: \"3\", period: \"period\"\n      }\n    },\n    variableOrder: [],\n    filtertagBoxes: {\n      2: {0: {key: \"tagName\", value: \"$tagValue\"}}\n    }\n  };\n  expect(qbs.substituteFinalQuery(\"$q\", mocked_this)).toBe(\n    \"over(\\\"avg:1h-avg:example.metric{}{tagName=hello}\\\", \\\"7d\\\", \\\"period\\\", 3)\"\n  );\n});\n\n"],"file":"queryBuilderService.js"}