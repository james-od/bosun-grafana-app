{"version":3,"sources":["../../../src/datasource/test/queryBuilderService.test.js"],"names":["QueryBuilderService","test","qbs","myMock","jest","fn","mocked_this","target","variables","id","type","inputName","inputValue","variableOrder","expect","substituteFinalQuery","toBe","indexInUI","queryFunction","metric","queryAgg","downsampleTime","downsampleAgg","endDuration","startDuration","grouptagBoxes","filtertagBoxes","key","value","flags","undefined","e","message","duration","num","period"],"mappings":"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","sourcesContent":["import {QueryBuilderService} from \"./../queryBuilderService\";\n\ntest('simple substitution in final query', () => {\n  var qbs = new QueryBuilderService();\n  const myMock = jest.fn()\n  const mocked_this = new myMock();\n  mocked_this.target = {\n    variables: [\n      {id: 0, type: \"variable\", inputName: \"$a\", inputValue: \"1\"}\n    ],\n    variableOrder: []\n  };\n  expect(qbs.substituteFinalQuery(\"$a\", mocked_this)).toBe(\"1\");\n});\n\ntest('multiple simple substitutions in final query', () => {\n  var qbs = new QueryBuilderService();\n  const myMock = jest.fn()\n  const mocked_this = new myMock();\n  mocked_this.target = {\n    variables: [\n      {id: 0, type: \"variable\", inputName: \"$a\", inputValue: \"1\", indexInUI: 0},\n      {id: 1, type: \"variable\", inputName: \"$b\", inputValue: \"2\", indexInUI: 1},\n      {id: 2, type: \"variable\", inputName: \"$c\", inputValue: \"3\", indexInUI: 2}\n    ],\n    variableOrder: []\n  };\n  expect(qbs.substituteFinalQuery(\"$a$b$c\", mocked_this)).toBe(\"123\");\n});\n\ntest('multiple nested substitutions', () => {\n  var qbs = new QueryBuilderService();\n  const myMock = jest.fn()\n  const mocked_this = new myMock();\n  mocked_this.target = {\n    variables: [\n      {id: 0, type: \"variable\", inputName: \"$a\", inputValue: \"1\", indexInUI: 0},\n      {id: 1, type: \"variable\", inputName: \"$b\", inputValue: \"$a\", indexInUI: 1},\n      {id: 2, type: \"variable\", inputName: \"$c\", inputValue: \"$a$b\", indexInUI: 2}\n    ],\n    variableOrder: []\n  };\n  expect(qbs.substituteFinalQuery(\"$c\", mocked_this)).toBe(\"11\");\n});\n\ntest('Complex substitutions', () => {\n  var qbs = new QueryBuilderService();\n  const myMock = jest.fn()\n  const mocked_this = new myMock();\n  mocked_this.target = {\n    variables: [\n      {id: 0, type: \"variable\", inputName: \"$time\", inputValue: \"1h\", indexInUI: 0},\n      {id: 1, type: \"variable\", inputName: \"$tagValue\", inputValue: \"hello\", indexInUI: 1},\n      {\n        id: 2, type: \"queryVariable\", inputValue: \"$q\", queryFunction: \"q\", metric: \"example.metric\", queryAgg: \"avg\",\n        downsampleTime: \"$time\", downsampleAgg: \"avg\", endDuration: \"2h\", startDuration:\"$time\", grouptagBoxes: {},\n        filtertagBoxes: {0: {key: \"tagName\", value: \"$tagValue\"}}, indexInUI: 2\n      }\n    ],\n    variableOrder: []\n  };\n  expect(qbs.substituteFinalQuery(\"$q\", mocked_this)).toBe(\n    \"q(\\\"avg:1h-avg:example.metric{}{tagName=hello}\\\", \\\"1h\\\", \\\"2h\\\")\"\n  );\n});\n\ntest('Flags', () => {\n  var qbs = new QueryBuilderService();\n  const myMock = jest.fn()\n  const mocked_this = new myMock();\n  mocked_this.target = {\n    variables: [\n      {\n        id: 0, type: \"queryVariable\", inputValue: \"$q\", queryFunction: \"q\", flags: \"rate{counter,,1}\", metric: \"example.metric\", queryAgg: \"avg\",\n        downsampleTime: \"$time\", downsampleAgg: \"avg\", endDuration: \"2h\", startDuration:\"$time\", grouptagBoxes: {},\n        filtertagBoxes: {}, indexInUI: 0\n      }\n    ],\n    variableOrder: []\n  };\n  expect(qbs.substituteFinalQuery(\"$q\", mocked_this)).toBe(\n    \"q(\\\"avg:$time-avg:rate{counter,,1}:example.metric{}{}\\\", \\\"$time\\\", \\\"2h\\\")\"\n  );\n});\ntest('reordered complex substitution', () => {\n  var qbs = new QueryBuilderService();\n  const myMock = jest.fn()\n  const mocked_this = new myMock();\n  mocked_this.target = {\n    variables: [\n      {id: 0, type: \"variable\", inputName: \"$time\", inputValue: \"1h\", indexInUI: 0},\n      {id: 1, type: \"variable\", inputName: \"$tagValue\", inputValue: \"hello\", indexInUI: 2},\n      {\n        id: 2, type: \"queryVariable\", inputValue: \"$q\", queryFunction: \"q\", metric: \"example.metric\", queryAgg: \"avg\",\n        downsampleTime: \"$time\", downsampleAgg: \"avg\", endDuration: \"2h\", startDuration:\"$time\", grouptagBoxes: {},\n        filtertagBoxes: {\n          0: {key: \"tagName\", value: \"$tagValue\"}\n        }, indexInUI: 1\n      }\n    ],\n  };\n  expect(qbs.substituteFinalQuery(\"$q\", mocked_this)).toBe(\n    \"q(\\\"avg:1h-avg:example.metric{}{tagName=$tagValue}\\\", \\\"1h\\\", \\\"2h\\\")\"\n  );\n});\n\ntest('error case - query function not set', () => {\n  var qbs = new QueryBuilderService();\n  const myMock = jest.fn()\n  const mocked_this = new myMock();\n  mocked_this.target = {\n    variables: [\n      {\n        id: 0, type: \"queryVariable\", inputValue: \"$q\", queryFunction: undefined, metric: \"example.metric\", queryAgg: \"avg\",\n        downsampleTime: \"$time\", downsampleAgg: \"avg\", endDuration: \"2h\", startDuration:\"$time\", indexInUI: 0\n      }\n    ],\n    //Simpler than trying to mock HTMLCollection\n    variableOrder: []\n  };\n  try{\n    qbs.substituteFinalQuery(\"$q\", mocked_this);\n  }catch (e) {\n    expect(e.message).toBe(\"Query function not set\");\n  }\n});\n\ntest('query types with `num` arg are built correctly', () => {\n  var qbs = new QueryBuilderService();\n  const myMock = jest.fn()\n  const mocked_this = new myMock();\n  mocked_this.target = {\n    variables: [\n      {id: 0, type: \"variable\", inputName: \"$time\", inputValue: \"1h\", indexInUI: 0},\n      {id: 1, type: \"variable\", inputName: \"$tagValue\", inputValue: \"hello1\", indexInUI: 1},\n      {\n        id: 2, type: \"queryVariable\", inputValue: \"$q\", queryFunction: \"over\", metric: \"example.metric\", queryAgg: \"avg\",\n        downsampleTime: \"$time\", downsampleAgg: \"avg\", duration: \"7d\", num: \"3\", period: \"period\", grouptagBoxes: {},\n        filtertagBoxes: {0: {key: \"tagName\", value: \"$tagValue\"}}, indexInUI: 2\n      }\n    ],\n    variableOrder: []\n  };\n  expect(qbs.substituteFinalQuery(\"$q\", mocked_this)).toBe(\n    \"over(\\\"avg:1h-avg:example.metric{}{tagName=hello1}\\\", \\\"7d\\\", \\\"period\\\", 3)\"\n  );\n});\n\ntest('Group tags', () => {\n  var qbs = new QueryBuilderService();\n  const myMock = jest.fn()\n  const mocked_this = new myMock();\n  mocked_this.target = {\n    variables: [\n      {id: 0, type: \"variable\", inputName: \"$time\", inputValue: \"1h\", indexInUI: 0},\n      {id: 1, type: \"variable\", inputName: \"$tagValue\", inputValue: \"hello1\", indexInUI: 1},\n      {\n        id: 2, type: \"queryVariable\", inputValue: \"$q\", queryFunction: \"over\", metric: \"example.metric\", queryAgg: \"avg\",\n        downsampleTime: \"$time\", downsampleAgg: \"avg\", duration: \"7d\", num: \"3\", period: \"period\", grouptagBoxes:\n          {0: {key: \"tagName1\", value: \"$tagValue\"}, 1: {key: \"tagName2\", value: \"hello2\"}},\n        filtertagBoxes: {}, indexInUI: 2\n      }\n    ],\n    variableOrder: []\n  };\n  expect(qbs.substituteFinalQuery(\"$q\", mocked_this)).toBe(\n    \"over(\\\"avg:1h-avg:example.metric{tagName1=hello1,tagName2=hello2}{}\\\", \\\"7d\\\", \\\"period\\\", 3)\"\n  );\n});\n\ntest('Multiple of both tag types', () => {\n  var qbs = new QueryBuilderService();\n  const myMock = jest.fn()\n  const mocked_this = new myMock();\n  mocked_this.target = {\n    variables: [\n      {id: 0, type: \"variable\", inputName: \"$time\", inputValue: \"1h\", indexInUI: 0},\n      {id: 1, type: \"variable\", inputName: \"$tagValue1\", inputValue: \"hello1\", indexInUI: 1},\n      {id: 1, type: \"variable\", inputName: \"$tagValue2\", inputValue: \"hello2\", indexInUI: 1},\n      {\n        id: 2, type: \"queryVariable\", inputValue: \"$q\", queryFunction: \"over\", metric: \"example.metric\", queryAgg: \"avg\",\n        downsampleTime: \"$time\", downsampleAgg: \"avg\", duration: \"7d\", num: \"3\", period: \"period\", grouptagBoxes:\n          {0: {key: \"groupTag1\", value: \"$tagValue1\"}, 1: {key: \"groupTag2\", value: \"a\"}},\n        filtertagBoxes: {0: {key: \"filterTag1\", value: \"b\"}, 1: {key: \"filterTag2\", value: \"$tagValue2\"}}, indexInUI: 2\n      }\n    ],\n    variableOrder: []\n  };\n  expect(qbs.substituteFinalQuery(\"$q\", mocked_this)).toBe(\n    \"over(\\\"avg:1h-avg:example.metric{groupTag1=hello1,groupTag2=a}{filterTag1=b,filterTag2=hello2}\\\", \\\"7d\\\", \\\"period\\\", 3)\"\n  );\n});\n\n"],"file":"queryBuilderService.js"}