{"version":3,"sources":["../../../src/panels/incident-list/module.js"],"names":["_","moment","MetricsPanelCtrl","bosunIncidentListPanelEditor","statusMap","BosunIncidentListCtrl","$scope","$injector","$rootScope","$window","datasourceSrv","templateSrv","utilSrv","backendSrv","dashboardSrv","self","panelCtrl","ctrl","linkUrl","incidentList","refreshData","bind","bodyHTML","reversedFields","showHelp","storeId","getCurrent","id","panel","get","then","user","datasource","preRelease","addEditorTab","onMetricsPanelRefresh","sessionStorage","getItem","type","field","rev","setItem","join","sortSpec","getSort","split","sortIncidentsByStatus","sortIncidents","otherPanelInFullscreenMode","property","noswap","sortBy","setSort","reverse","incident","query","that","IncidentListQuery","data","each","item","incidentLink","annotateUrl","Id","callSort","unixTS","relativeOnly","m","unix","relative","fromNow","format","prefix","status","modalScope","$new","actions","Actions","appEvent","src","scope","events","Events","selectedMultiAction","incidents","filter","selected","length","i","CurrentStatus","AlertName","TagsString","NeedAck","showActionForm","action","Array","isArray","actionForm","actionRequest","Type","User","login","Message","Notify","Keys","map","submitAction","AlertBodyHTML","$event","idx","shiftKey","lastChecked","undefined","document","getSelection","removeAllRanges","start","Math","min","end","max","templateUrl"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport { bosunIncidentListPanelEditor } from './editor';\n\nvar statusMap = {\n    \"normal\": 0,\n    \"warning\": 1,\n    \"critical\": 2,\n    \"unknown\": 3\n}\n\nexport class BosunIncidentListCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $rootScope, $window, datasourceSrv, templateSrv, utilSrv, backendSrv, dashboardSrv) {\n        super($scope, $injector);\n        var self = this;\n        this.panelCtrl = $scope.ctrl;\n        this.datasourceSrv = datasourceSrv;\n        this.$window = $window;\n        this.templateSrv = templateSrv;\n        this.$rootScope = $rootScope;\n        this.linkUrl = \"\";\n        this.incidentList = [];\n        this.refreshData = this.refreshData.bind(this);\n        this.refreshData();\n        this.utilSrv = utilSrv;\n        this.bodyHTML = \"\";\n        this.reversedFields = {};\n        this.showHelp = 0;\n        this.storeId = dashboardSrv.getCurrent().id + \"-\" + this.panel.id;\n        backendSrv.get('/api/user').then(user => {\n            this.user = user;\n        });\n        this.datasourceSrv.get(this.panel.datasource).then(datasource => {\n            this.preRelease = datasource.preRelease;\n        });\n    }\n\n    onInitMetricsPanelEditMode() {\n        this.addEditorTab('Options', bosunIncidentListPanelEditor, 2);\n    }\n\n    refresh() {\n        this.onMetricsPanelRefresh();\n    }\n\n    getSort() {\n        return this.$window.sessionStorage.getItem(this.storeId + \"sort\");\n    }\n\n    setSort(type, field, rev) {\n        this.$window.sessionStorage.setItem(this.storeId + \"sort\", [type, field, rev].join(\":\"));\n    }\n\n    callSort() {\n        var sortSpec = this.getSort();\n        if (!sortSpec || sortSpec == \"\") {\n            return;\n        }\n        // Property, Type, Reverse?\n        var split = sortSpec.split(\":\");\n        this.reversedFields[split[0]] = split[2] == \"true\";\n        if (split[1] == \"status\") {\n            this.sortIncidentsByStatus(split[0], true);\n        }\n        if (split[1] == \"alpha\") {\n            this.sortIncidents(split[0], true);\n        }\n    }\n\n    onMetricsPanelRefresh() {\n        // ignore fetching data if another panel is in fullscreen\n        if (this.otherPanelInFullscreenMode()) { return; }\n        this.refreshData();\n    }\n\n    sortIncidents(property, noswap) {\n        this.incidentList = _.sortBy(this.incidentList, 'Id');\n        this.incidentList = _.sortBy(this.incidentList, property)\n        if (!noswap) {\n            this.reversedFields[property] = this.reversedFields[property] == false;\n        }\n        this.setSort(property, \"alpha\", this.reversedFields[property])\n        if (this.reversedFields[property] == true) {\n            this.incidentList.reverse();\n        }\n    }\n\n    sortIncidentsByStatus(property, noswap) {\n        this.incidentList = _.sortBy(this.incidentList, 'Id');\n        this.incidentList = _.sortBy(this.incidentList, (incident) => {\n            return statusMap[incident[property]];\n        });\n        if (!noswap) {\n            this.reversedFields[property] = this.reversedFields[property] == false;\n        }\n        this.setSort(property, \"status\", this.reversedFields[property])\n        if (this.reversedFields[property] == true) {\n            this.incidentList.reverse();\n        }\n    }\n\n    refreshData() {\n        var query = this.panel.query;\n        var that = this;\n        return this.datasourceSrv.get(this.panel.datasource)\n            .then(datasource => {\n                datasource.IncidentListQuery(query).then((data) => {\n                    data = _.each(data, (item) => {\n                        item.incidentLink = datasource.annotateUrl + \"/incident?id=\" + item.Id;\n                        item.bodyHTML = \"\";\n                        return item;\n                    })\n                    that.incidentList = data;\n                    that.callSort();\n                })\n            });\n    }\n\n    fmtTime(unixTS, relativeOnly) {\n        var m = moment.unix(unixTS);\n        var relative = '(' + m.fromNow() + ')'\n        if (relativeOnly) {\n            return relative;\n        }\n        return m.format('YYYY-MM-DD HH:mm:ss ') + relative;\n    }\n\n    statusClass(prefix, status) {\n        switch (status) {\n            case \"critical\": return prefix + \"error\";\n            case \"unknown\": return prefix + \"info\";\n            case \"warning\": return prefix + \"warning\";\n            case \"normal\": return prefix + \"success\";\n            default: return prefix + \"error\";\n        }\n    };\n\n    showActions(incident) {\n        var modalScope = this.$scope.$new();\n        modalScope.actions = incident.Actions;\n        this.$rootScope.appEvent('show-modal', {\n            src: \"public/plugins/bosun-app/panels/incident-list/modal_actions.html\",\n            scope: modalScope\n        });\n    }\n\n    showEvents(incident) {\n        var modalScope = this.$scope.$new();\n        modalScope.events = incident.Events.reverse();\n        this.$rootScope.appEvent('show-modal', {\n            src: \"public/plugins/bosun-app/panels/incident-list/modal_events.html\",\n            scope: modalScope\n        });\n    }\n\n    multiAction() {\n        if (!this.selectedMultiAction) {\n            return\n        }\n        var incidents = _.filter(this.incidentList, (incident) => {\n            return incident.selected == true;\n        })\n        if (incidents.length == 0) {\n            return\n        }\n        for (var i of incidents) {\n            if (this.selectedMultiAction == \"forget\") {\n                if (i.CurrentStatus != \"unknown\") {\n                    this.$rootScope.appEvent('alert-error', [\"Action Error\", 'can not forget an alert that is not currently unknown: ' + i.AlertName + i.TagsString])\n                    return\n                }\n            }\n            if (this.selectedMultiAction == \"close\") {\n                if (i.CurrentStatus != \"normal\") {\n                    this.$rootScope.appEvent('alert-error', [\"Action Error\", 'can not close an alert that is not currently normal: ' + i.AlertName + i.TagsString])\n                    return\n                }\n            }\n            if (this.selectedMultiAction == \"ack\") {\n                if (!i.NeedAck) {\n                    this.$rootScope.appEvent('alert-error', [\"Action Error\", 'can not ack an alert that is already acknowledged: ' + i.AlertName + i.TagsString])\n                    return\n                }\n            }\n        }\n        this.showActionForm(incidents, this.selectedMultiAction)\n    }\n\n    // incidents can be an incident, but also an [] of incidents    \n    showActionForm(incidents, action) {\n        if (!Array.isArray(incidents)) {\n            incidents = [incidents]\n        }\n        var modalScope = this.$scope.$new();\n        modalScope.incidents = incidents;\n        modalScope.action = action;\n        this.$rootScope.appEvent('show-modal', {\n            src: \"public/plugins/bosun-app/panels/incident-list/modal_action.html\",\n            scope: modalScope\n        });\n    }\n\n    submitActionForm(incidents, action) {\n        var self = this;\n        if (!this.actionForm) {\n            self.$rootScope.appEvent('alert-error', ['Action Error', 'must fill out form fields']);\n            return;\n        }\n        var actionForm = this.actionForm;\n        var actionRequest = {\n            Type: action,\n            User: actionForm.User || self.user.login,\n            Message: actionForm.Message,\n            Notify: actionForm.Notify == true,\n        }\n        if (actionRequest.Message == \"\" && actionRequest.Notify == true) {\n            self.$rootScope.appEvent('alert-error', ['Action Error', 'must fill out message field when notifying']);\n            return;\n        }\n        actionRequest.Keys = _.map(incidents, (incident) => {\n            return incident.AlertName + incident.TagsString;\n        });\n        this.datasourceSrv.get(this.panel.datasource).\n            then(datasource => {\n                datasource.submitAction(actionRequest).then(() =>\n                    self.refreshData().then(() => { self.actionForm.Message = \"\"; }) // clear message\n                )\n            })\n    }\n\n    showBody(incident) {\n        this.datasourceSrv.get(this.panel.datasource).\n            then(datasource => {\n                datasource.AlertBodyHTML(incident.AlertName + incident.TagsString).then(data => {\n                    var modalScope = this.$rootScope.$new();\n                    modalScope.bodyHTML = data;\n                    this.$rootScope.appEvent('show-modal', {\n                        src: \"public/plugins/bosun-app/panels/incident-list/modal_body.html\",\n                        scope: modalScope\n                    });\n                })\n            });\n    }\n\n    // Enable selecting a range of checkboxes with shift-click\n    selectRange($event, idx) {\n        if ($event.shiftKey && this.$scope.lastChecked != undefined) {\n            // This makes the selection \"flash\" and then get removed\n            // not sure of a good way to prevent it\n            document.getSelection().removeAllRanges();\n            var start = Math.min(idx, this.$scope.lastChecked);\n            var end = Math.max(idx, this.$scope.lastChecked);\n            for (var i = start; i <= end; i++) {\n                this.incidentList[i].selected = true;\n            }\n        }\n        this.$scope.lastChecked = idx;\n    }\n\n}\n\nBosunIncidentListCtrl.templateUrl = 'panels/incident-list/module.html';\n\nexport {\n    BosunIncidentListCtrl as PanelCtrl\n};\n"],"file":"module.js"}